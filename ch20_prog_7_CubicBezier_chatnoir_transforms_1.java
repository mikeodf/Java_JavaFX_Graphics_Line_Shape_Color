// CubicBezier_chatnoir_transforms_1.java
/*
The linear transforms of scaling, translation, rotation, skew, 
veretical and horizontal flipping.

Tested on: java version "java-8-oracle"
Author: Mike Ohlson de Fine 
*/

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*; // Graphic primitives library.
import java.lang.reflect.Array; 
import java.lang.Math;

public class CubicBezier_chatnoir_transforms_1 extends Application 
{

    Path Points2paths(double[][] path_points, MoveTo  selected_moveTo, double Stroke_width, Color kula)  // OK
    {
      /* Purpose: Convert a 2D array of Bezier points (from a SVG file) into a JavaFX Cubic path.
                  The MoveTo (start) is obtained from the make_moveto( path_point_line0) method
                  by prior arrangement.
         Applies to : One path - the raw cubic bezier points that will be used to construct all the 
                      CubicCurveTos that make up the sequence of drawn CubicCurveTo parts. 
         The Output: An assembled path ready to be added to stage for display.
      */

      int num_cctos = Array.getLength(path_points) ; // Number of CubicCurveTos making up the path.
      CubicCurveTo crv_pth1 =  new CubicCurveTo();   // The set fo curves for a path. 
    
     // Assemble one path.
     Path  path_n =  new Path(); 
     path_n.getElements().add(selected_moveTo); // Select the appropriate start position.
     for (int j=0; j< num_cctos ; j++)
     {    
         crv_pth1 = new CubicCurveTo(path_points[j][0], path_points[j][1], path_points[j][2],
                                     path_points[j][3], path_points[j][4], path_points[j][5]); 

         path_n.getElements().add(crv_pth1);    
         path_n.setStrokeWidth(Stroke_width); 
         path_n.setStroke(kula);
     };
     return path_n ;
    }

//========================================================================
    double[][] Scale_big_small(double[][] path_points, double scaleX, double scaleY)  // 
    {
      /* Purpose: Scale (increase/decrease) the size of a shape. 
         Applies to : One path - the raw points preceding CubicCurveTos that
                      make up the sequence of drawn CubicCurveTo parts. 
         The Output: A scaled path.
      */

      int num_cctos = Array.getLength(path_points) ; // Number of CubicCurveTos making up the path.
      double[][]  pts_temp =  new double[num_cctos][6]; 

     for (int j=0; j< num_cctos ; j++)
     {    
         pts_temp[j][0] = path_points[j][0]*scaleX;
         pts_temp[j][1] = path_points[j][1]*scaleY;
         pts_temp[j][2] = path_points[j][2]*scaleX;
         pts_temp[j][3] = path_points[j][3]*scaleY;
         pts_temp[j][4] = path_points[j][4]*scaleX;
         pts_temp[j][5] = path_points[j][5]*scaleY; 

     };
     return pts_temp ;
    }
//========================================================================
    double[][] Shift_translate(double[][] path_points,double shiftX, double shiftY)  // OK
    {
      /* Purpose: Translate a shape by the amount (shiftX, shiftY).
         Applies to : One path - the raw points preceding CubicCurveTos that 
                      make up the sequence of drawn CubicCurveTo parts. 
         The Output: A shifted path.
      */

      int num_cctos = Array.getLength(path_points) ; // Number of CubicCurveTos making up the path.
      double[][]  pts_temp =  new double[num_cctos][6]; 
     for (int j=0; j< num_cctos ; j++)
     {    
         pts_temp[j][0] = path_points[j][0] + shiftX ;
         pts_temp[j][1] = path_points[j][1] + shiftY ;
         pts_temp[j][2] = path_points[j][2] + shiftX ;
         pts_temp[j][3] = path_points[j][3] + shiftY ;
         pts_temp[j][4] = path_points[j][4] + shiftX ;
         pts_temp[j][5] = path_points[j][5] + shiftY ; 

     };
     return pts_temp ;
    }
//========================================================================
    double[][] Shear_XY(double[][] path_points,double shearX, double shearY) // OK
    {
      /* Purpose: Shear or skew distort a shape.
         Applies to : One path - the raw points preceding CubicCurveTos that 
                      make up the sequence of drawn CubicCurveTo parts. 
         The Output: A skewed path.
      */
      double[] min_max_span = get_min_max_span(path_points) ;
      double minx = min_max_span[0] ;
      double maxx = min_max_span[1] ;
      double spanx = min_max_span[2] ;
      double miny = min_max_span[3] ;
      double maxy = min_max_span[4] ;
      double spany = min_max_span[5] ;

      int num_cctos = Array.getLength(path_points) ; // Number of CubicCurveTos making up the path.
      double[][]  pts_temp =  new double[num_cctos][6]; 

     for (int j=0; j< num_cctos ; j++)
     {            
         pts_temp[j][0] = path_points[j][0] + shearX * (path_points[j][1]-miny)/spany ;
         pts_temp[j][1] = path_points[j][1] + shearY * (path_points[j][0]-minx)/spanx ;

         pts_temp[j][2] = path_points[j][2] + shearX * (path_points[j][3]-miny)/spany ;
         pts_temp[j][3] = path_points[j][3] + shearY * (path_points[j][2]-minx)/spanx ;

         pts_temp[j][4] = path_points[j][4] + shearX * (path_points[j][5]-miny)/spany ;
         pts_temp[j][5] = path_points[j][5] + shearY * (path_points[j][4]-minx)/spanx ; 

     };
     return pts_temp ;
    }
//========================================================================
    double[][] Flip_Horizontal(double[][] path_points) // 
    {
      /* Purpose: Flip horizontally a set of curves about the center of the figure.
         Applies to : One path - the raw points preceding CubicCurveTos that 
                      make up the sequence of drawn CubicCurveTo parts. 
         The Output: A horizontal flip of all points about the centroid.
      */
      double[] centroid = get_centroid( path_points);
      double x_cent = centroid[0];
      int num_cctos = Array.getLength(path_points) ; // Number of CubicCurveTos making up the path.
      double[][]  pts_temp =  new double[num_cctos][6]; 

     for (int j=0; j< num_cctos ; j++)
     {    
         pts_temp[j][0] = x_cent - (path_points[j][0] - x_cent) ;
         pts_temp[j][1] = path_points[j][1]  ;
         pts_temp[j][2] = x_cent - (path_points[j][2] - x_cent) ;
         pts_temp[j][3] = path_points[j][3]  ;
         pts_temp[j][4] = x_cent - (path_points[j][4] - x_cent) ;  ;
         pts_temp[j][5] = path_points[j][5]  ; 

     };
     return pts_temp ;
    }
//========================================================================
    double[][] Flip_Vertical(double[][] path_points)   //  
    {
      /* Purpose: Flip vertically a set of curves (upside down) about the center of the figure.
         Applies to : One path - the raw points preceding CubicCurveTos that 
                      make up the sequence of drawn CubicCurveTo parts. 
         The Output: A Vertical flip of all points about the centroid.
      */
      double[] centroid = get_centroid( path_points);
      double y_cent = centroid[1];
      int num_cctos = Array.getLength(path_points) ; // Number of CubicCurveTos making up the path.
      double[][]  pts_temp =  new double[num_cctos][6]; 

     for (int j=0; j< num_cctos ; j++)
     {    
         pts_temp[j][0] = path_points[j][0]  ;
         pts_temp[j][1] =  y_cent - (path_points[j][1] - y_cent)  ;
         pts_temp[j][2] = path_points[j][2]  ;
         pts_temp[j][3] = y_cent - (path_points[j][3] - y_cent)   ;
         pts_temp[j][4] = path_points[j][4]  ;
         pts_temp[j][5] =  y_cent - (path_points[j][5] - y_cent)   ; 

     };
     return path_points ;
    }
//========================================================================
    double[][] Rotate_aboutXY(double[][] path_points,  double centerX, double centerY, double alphadeg)  //OK.
    {
      /* Purpose: Rotate a raw path precursor about a selected center of rotation.
         Applies to : One path - the raw points preceding CubicCurveTos 
                      that make up the sequence of drawn CubicCurveTo parts. 
         The Output: A path rotationally transformed around (centerX, centerY).
      */

      int num_cctos = Array.getLength(path_points) ; // Number of CubicCurveTos making up the path.
      double[][]  pts_temp =  new double[num_cctos][6]; 

      double hypotenuse ;
      double X1, Y1, X2, Y2, X3, Y3;
      double alpharad = alphadeg*Math.PI/180.;
      double current_angl ; // Polar coordinate angle relative to center of rotation.

     for (int j=0; j< num_cctos ; j++)
     {   
         // Note: Java angles must be in radians.
         X1 = (path_points[j][0] - centerX) ; // XX1 squared.
         Y1 = (path_points[j][1] - centerY) ; // YY1 squared.
         current_angl = Math.atan2(Y1,X1);  
         current_angl =  alpharad + current_angl ;    
         hypotenuse =Math.sqrt(X1*X1 + Y1*Y1 ) ; 
         pts_temp[j][0] = centerX + hypotenuse * Math.cos(current_angl)  ;
         pts_temp[j][1] = centerY + hypotenuse * Math.sin(current_angl)  ;
         
         X2 = (path_points[j][2] - centerX) ;
         Y2 = (path_points[j][3] - centerY) ;
         current_angl = Math.atan2(Y2,X2);   
         current_angl =  alpharad +current_angl ;  
         hypotenuse =Math.sqrt(X2*X2 + Y2*Y2 ) ;
         pts_temp[j][2] = centerX + hypotenuse * Math.cos(current_angl)  ;
         pts_temp[j][3] = centerY + hypotenuse * Math.sin(current_angl)  ;

         X3 = (path_points[j][4] - centerX) ;
         Y3 = (path_points[j][5] - centerY) ;
         current_angl = Math.atan2(Y3,X3);   
         current_angl =  alpharad +current_angl ; 
         hypotenuse =Math.sqrt(X3*X3 + Y3*Y3 ) ;
         pts_temp[j][4] = centerX + hypotenuse * Math.cos(current_angl)  ;
         pts_temp[j][5] = centerY + hypotenuse * Math.sin(current_angl)  ;
         
     };
     return pts_temp ;
    }

//========================================================================
   
   double[] get_centroid(double[][] path_points)
    { /*  Purpose: Obtain the geometric center of the raw precursor of a cubic path.
         Applies to : One path - the raw points preceding CubicCurveTos that 
                        make up the sequence of drawn CubicCurveTo parts. 
         The Output: The center of the bounding box of the shape.
      */
      int num_cctos = Array.getLength(path_points) ; // Number of CubicCurveTos making up the path.
      double minX = path_points[0][4];
      double maxX = path_points[0][4];    
      double minY = path_points[0][5];
      double maxY = path_points[0][5];    
     
     for (int j=0; j< num_cctos ; j++)
     // We inspect X at [4] and Y at [5] doing max and min extration on each point to 
     //   discover the bounding box for the figure. The center of this bounding box
     //   we will use as the center or centroid. 

     {             
         minX = Math.min(minX, path_points[j][4])  ;
         maxX = Math.max(maxX, path_points[j][4])  ;

         minY = Math.min(minY, path_points[j][5])  ;
         maxY = Math.max(maxY, path_points[j][5])  ;
     };
    
     double[] centroidXY =  {(maxX+minX)/2.0, (maxY+minY)/2.0} ;
     return centroidXY;
    }
    
//========================================================================
   double[] get_min_max_span(double[][] path_points)
    {
      /*   Purpose: Obtain the minimum and maximum coordinate positions, width and height
                    of the raw precursor of a cubic path.
            Applies to : One path - the raw points preceding CubicCurveTos that make up 
                         the sequence of drawn CubicCurveTo parts. 
            The Output: The center of the bounding box of the shape.
      */

      int num_cctos = Array.getLength(path_points) ; // Number of CubicCurveTos making up the path.
      double minX = path_points[0][4];
      double maxX = path_points[0][4];    
      double minY = path_points[0][5];
      double maxY = path_points[0][5];    
     
     for (int j=0; j< num_cctos ; j++)
     // We inspect X at index [4] and Y at [5] doing max and min extration on each point to 
     //   discover the bounding box for the figure. 
     {             
         minX = Math.min(minX, path_points[j][4])  ;
         maxX = Math.max(maxX, path_points[j][4])  ;

         minY = Math.min(minY, path_points[j][5])  ;
         maxY = Math.max(maxY, path_points[j][5])  ;
     };
     double spanX = maxX - minX ; // The width.
     double spanY = maxY - minY ; // The height.
     double[] minmaxspanXY =  { minX, maxX, spanX, minY,  maxY , spanY} ;
     return minmaxspanXY;
    }
    
//========================================================================
   MoveTo make_moveto(double[] path_point_line0)  // OK
       {  /* Purpose: Construct the appropriate MoveTo object from the first Bezier point
            (from a SVG file) for assembly into a JavaFX Cubic path using Points2paths(...).
                 
          Applies to : One path - the raw cubic bezier points that will be used to construct
                        all the CubicCurveTos that make up the sequence of drawn CubicCurveTo parts. 
          The Output: The starting position MoveTo for a path.
         */        
          double XX = path_point_line0[0] ;
          double YY = path_point_line0[1] ;
          MoveTo moveTo_out = new MoveTo(XX, YY);
          return moveTo_out ;
        } 
//===================================================================================
//===================================================================================
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
// Head -Face

 double[][] chat_cube1  = {{47.71,35.65,   48.16,34.5,  49.93,33.79},{51.7,33.08,53.08,33.4,54.94,32.27},{55.35,32.01,55.99,31.25,55.99,31.25},{55.99,31.25,56.44,31.15,56.7,30.6},{57.02,29.86,55.69,26.49,55.69,26.49},{55.69,26.49,55.92,26,56.02,25.55},{56.12,25.09,55.77,24.68,55.93,24.38},{56.26,23.76,56.46,24,56.87,23.69},{57.27,23.39,59.32,21.47,60.22,19.58},{60.73,18.22,60.78,16.72,60.22,16.77},{60.22,16.77,59,17.11,58.12,17.8},{57.25,18.49,56.34,19.08,55.69,19.52},{55.03,19.96,52.94,20.99,52.94,20.99},{53.91,21.52,54.78,20.64,55.69,20.05},{56.59,19.46,58.72,17.89,59.16,17.77},{59.59,17.64,60.09,17.89,59.97,18.3},{59.84,18.71,58.84,20.36,58.44,21.08},{58.03,21.8,57.28,22.52,56.91,22.86},{56.53,23.21,56.09,23.39,56,23.55},{55.91,23.71,56.06,23.8,55.66,23.83},{55.25,23.86,55.03,23.86,55.09,24.02},{55.16,24.18,55.59,24.39,55.56,24.96},{55.53,25.52,55.5,25.89,55.37,26.11},{55.25,26.33,55.06,26.39,55.19,26.83},{55.31,27.27,55.84,27.96,55.91,28.24},{55.97,28.52,56.28,29.58,56.28,29.83},{56.28,30.08,56.16,30.52,56.16,30.52},{56.16,30.52,55.75,30.74,55.56,30.89},{55.37,31.05,55.28,31.46,54.94,31.68},{54.59,31.89,53.59,32.43,52.66,32.55},{51.72,32.68,50.25,33.11,49.69,33.36},{49.12,33.61,48.62,34.02,48.31,34.33},{48,34.64,47.72,34.8,47.66,35.14},{47.59,35.49,47.71,35.65,47.71,35.65}};


 double[][] chat_cube1b  = {{30.78,16.93,30.55,18.48,30.86,19.35},{31.58,21.43,32.49,21.8,33.56,22.59},{34.07,22.97,34.83,23.39,35.04,23.76},{35.2,24.54,34.72,24.34,34.67,24.74},{34.62,25.14,35.35,25.65,35.25,25.9},{35.05,26.37,34.58,26.66,34.33,26.91},{34.08,27.16,34.01,27.95,34.01,27.95},{34.01,27.95,33.25,28.39,33.2,29.31},{33.4,30.27,34,31.33,35.04,31.86},{37.05,32.88,38.97,32.58,40.6,33.12},
{41.8,33.52,42.95,34.3,43.31,34.76},{43.66,35.21,43.68,35.81,43.68,35.81},{43.68,35.81,43.81,36.18,43.94,36.14},{44.06,36.11,44.22,36.11,44.19,35.96},{44.16,35.8,44,34.93,43.44,34.24},{42.87,33.55,41.44,32.79,40.31,32.33},{39.2,31.88,37.53,31.68,36.81,31.55},{36.09,31.43,34.56,30.8,34.31,29.83},{34.06,28.86,34.62,28.05,34.84,27.71},{35.06,27.36,35.37,26.8,35.59,26.71},{35.81,26.61,35.91,26.21,36.03,25.89},{36.16,25.58,36.12,25.49,36.12,25.49},{36.12,25.49,35.6,24.89,35.63,24.55},{35.66,24.21,36,23.68,35.87,23.46},{35.75,23.24,35.16,22.96,34.87,22.8},{34.59,22.64,33.2,21.84,32.47,20.99},{31.53,19.89,31.25,17.99,31.41,17.55},{31.56,17.11,31.97,17.24,32.28,17.24},{32.59,17.24,33.73,18.66,34.56,19.24},{35.64,20,36.82,20.64,38.03,21.18},{38.26,21.28,38.75,21.43,38.75,21.43},{39.22,20.68,36.37,19.52,35.91,19.3},{35.44,19.08,32.72,16.93,32.5,16.77},{32.28,16.61,31.38,16.63,31.38,16.63}};


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=

// Left shoulder.
 double[][] chat_cube2  = {{35.59,35.34,35.77,35.66,36.27,35.66},{36.77,35.66,38.77,35.73,40.16,36.31},{42.1,36.96,44.09,38.6,45.34,39.91},{46.62,41.23,47.52,42.02,47.98,42.98},{48.44,43.95,48.94,44.52,49.05,45.45},{49.16,46.37,49.98,48.34,50.09,49.44},{50.19,50.55,50.55,52.44,49.73,53.87},{48.93,55.21,48.48,56.73,47.55,57.96},{47.55,57.96,48.12,56.08,48.48,55.01},{48.84,53.94,49.28,53.29,49.41,51.73},{49.51,50.55,49.34,49.34,49.05,48.19},{48.75,47.03,48.3,46.12,47.66,44.87},{47.23,43.7,45.55,41.55,44.7,40.66},{43.84,39.77,42.09,38.06,41.16,37.52},{40.23,36.98,38.7,36.73,38.16,36.66},{37.63,36.59,36.38,36.38,35.88,36.41},{35.38,36.45,35.24,36.41,35.09,36.56},{34.95,36.7,34.56,37.38,34.34,37.77},{34.13,38.16,33.09,39.73,32.77,40.2},{32.45,40.66,31.81,43.09,31.81,43.77},{31.81,44.45,32.34,46.87,33.02,48.12},{33.7,49.37,35.95,53.05,36.27,53.69},{36.59,54.33,36.41,57.87,36.34,58.44},{36.27,59.01,35.59,59.51,35.59,59.51},{35.52,58.08,35.95,55.59,34.31,52.23},{33.37,50.31,32.23,49.87,31.2,46.62},{30.4,44.09,30.88,43.45,31.17,42.55},{31.45,41.66,31.52,40.23,31.77,39.48},{32.02,38.73,32.2,38.88,32.74,38.56},{33.02,38.16,33.48,37.02,33.98,36.38},{34.48,35.74,34.41,35.31,34.74,34.95},{35.06,34.59,34.7,34.24,34.74,33.49},{34.77,32.74,34.95,31.81,34.95,31.81},{35.98,32.34,35.88,32.84,35.88,33.09},{35.88,33.34,35.88,33.77,35.73,34.27},{35.59,34.77,35.59,35.34,35.59,35.34}};

// Right Collar
 double[][] chat_cube3  = {{53.45,36.65,52.55,36.88,51.76,37.66},{50.55,38.77,49.3,40.02,48.94,40.7},{48.25,41.69,48.19,43.34,48.19,43.34},{48.94,44.93,48.94,42.71,49.22,41.74},{49.5,40.77,50.41,40.24,50.78,39.86},{51.16,39.49,52.66,38.24,53.34,37.77},{54.03,37.3,54.78,36.93,54.78,36.93},{54.78,36.93,54.37,36.2,54.21,35.92},{54.06,35.64,53.37,35.27,53.18,34.96},{53,34.65,53,33.21,53,33.21},{52.37,33.33,52.5,34.89,52.66,35.58},{52.81,36.27,53.45,36.65,53.45,36.65}};

 double[][] chat_cube4  = {{54.87,37.14,55.44,38.41,55.76,39.34},{56.08,40.27,56.54,40.91,56.62,42.23},{56.7,43.58,55.99,46.27,55.84,47.98},{55.73,49.18,55.94,50.94,55.8,51.55},{55.79,52.27,55.69,53.76,55.23,54.23},{54.43,55.04,52.69,56.15,51.62,57.05},{50.55,57.94,48.34,59.97,47.34,61.22},{46.34,62.47,45.94,63.33,45.12,64.79},{44.3,66.26,43.12,69.29,42.84,70.51},{42.55,71.72,42.34,73.79,42.23,74.58},{42.13,75.36,41.91,76.72,42.09,77.5},{42.27,78.29,42.48,79.79,42.7,80.61},{42.91,81.43,43.34,82.5,42.91,83.11},{42.48,84,42.23,83.68,41.91,84.86},{41.59,86.03,41.84,89.07,41.8,90.14},{41.77,91.21,42.83,92.82,43.16,93.24},{43.62,93.85,44.15,94.47,44.15,94.47},{44.15,94.47,43.12,94.04,42.78,93.74},{42.28,93.36,41.72,92.39,41.28,91.74},{40.84,91.08,41,90.08,41,89.39},{41,88.71,40.97,85.86,41.03,85.36},{41.09,84.86,41.16,84.74,41.28,84.52},{41.41,84.3,41.97,82.89,42.09,82.24},{42.22,81.58,41.72,80.55,41.53,79.49},{41.34,78.43,41.34,76.64,41.34,75.68},{41.34,74.71,41.35,74.17,41.44,73.64},{41.53,73.11,41.72,70.99,41.91,70.11},{42.09,69.24,42.72,67.74,43.12,67.11},{43.59,65.9,45.47,62.61,46.44,61.02},{47.41,59.43,50.31,56.83,51.44,55.99},{52.56,55.14,53.91,54.39,54.5,53.36},{55.09,52.33,54.99,49.74,54.99,48.92},{54.99,48.11,55.32,46.08,55.41,45.43},{55.5,44.77,55.94,43.08,55.97,42.3},{56,41.52,55.69,41.11,55.41,40.33},{55.12,39.55,54.84,38.61,54.66,38.21},{54.47,37.8,54.06,37.49,54.06,37.49}};

 double[][] chat_cube5  = {{27.06,66.44,25.31,63.29,24.63,62.3},{23.95,61.3,23.53,61.3,23.49,60.97},{23.45,60.65,24.17,60.58,24.78,60.26},{25.38,59.94,25.95,59.76,26.24,59.87},{26.52,59.97,25.92,59.01,25.49,57.58},{25.06,56.15,23.6,55.19,23.6,55.19},{23.6,55.19,25.38,55.08,26.24,55.26},{27.1,55.44,27.38,55.48,27.38,55.48},{27.38,55.48,27.56,54.65,27.63,53.98},{27.7,53.3,28.27,52.41,28.27,52.41},{28.27,52.41,29.24,53.76,29.7,54.01},{30.17,54.26,30.88,54.33,31.52,53.94},{32.16,53.55,31.95,51.51,31.92,50.73},{31.88,49.94,32.45,49.34,32.45,49.34},{32.99,50.8,33.31,52.16,33.02,53.01},{32.74,53.87,32.44,55.12,31.56,55.55},{30.3,56.17,28.81,54.23,28.81,54.23},{28.81,54.23,28.6,54.73,28.63,55.26},{28.67,55.8,28.74,56.65,28.56,56.69},{28.38,56.73,27.81,56.44,27.42,56.37},{27.02,56.3,26.42,55.94,26.27,56.15},{26.13,56.37,27.02,57.65,27.2,58.19},{27.38,58.73,27.85,60.4,27.85,60.65},{27.85,60.9,27.95,61.15,27.52,61.08},{27.1,61.01,26.06,61.19,26.06,61.19},{26.06,61.19,26.85,62.9,27.31,64.12},{27.77,65.33,28.63,68.97,28.67,69.22},{28.7,69.47,28.59,70.52,28.59,70.52},{28.59,70.52,27.7,68.01,27.38,67.22}};

 double[][] chat_cube6  = {{29.06,89.18,31.38,88.32,31.84,87.46},{32.31,86.61,32.49,85.18,32.49,85.18},{32.49,85.18,33.16,84,33.38,83.71},{33.59,83.43,34.2,82.71,33.81,82.39},{33.41,82.07,32.74,81.89,32.74,81.89},{32.74,81.89,34.02,80.39,34.06,80.11},{34.09,79.82,33.84,79.29,33.56,79.25},{33.27,79.22,31.99,78.79,31.99,78.79},{31.99,78.79,32.24,76.57,32.16,76.32},{32.09,76.07,32.31,75.36,32.02,75.33},{31.74,75.29,31.13,75.65,30.77,75.68},{30.42,75.72,29.81,75.83,29.81,75.83},{29.81,75.83,29.74,74.36,29.31,73.68},{28.88,73,27.85,71.65,27.67,71.61},{27.49,71.58,27.38,71.72,27.35,71.97},{27.31,72.22,27.1,73.4,26.63,74.04},{26.17,74.68,25.31,75.61,25.31,75.61},{25.31,75.61,25.1,75.22,24.92,74.61},{24.74,74,24.49,73.36,24.49,73.36},{24.49,73.36,23.49,74.61,22.81,75.15},{22.13,75.68,20.31,76.72,20.31,76.72},{20.31,76.72,19.99,76.22,19.92,75.93},{19.85,75.65,19.38,75.08,19.38,75.08},{19.38,75.08,18.71,75.97,18.35,76.65},{17.99,77.32,16.8,78.79,16.8,78.79},{16.8,78.79,16.71,78.9,16.46,78.72},{16.21,78.54,16.17,78.11,15.89,78.18},{15.6,78.25,15.81,78.43,14.99,79.39},{14.17,80.36,11.57,82.75,10.46,82.93},{8.947,83.45,8.389,82.43,8.104,82.07},{7.818,81.72,7.818,81.43,7.64,81.5},{7.461,81.57,7.211,81.93,7.354,82.61},{7.497,83.29,8.318,84.68,9.817,84.36},{11.76,84.04,14.3,82.33,14.7,81.86},{15.09,81.4,15.64,80.75,15.64,80.75},{15.64,80.75,16.1,81.22,16.24,81.18},{16.39,81.14,17.56,79.97,17.89,79.64},{18.21,79.32,19.31,77.86,19.31,77.86},{19.31,77.86,19.49,78.5,19.74,78.72},{19.99,78.93,20.24,78.86,20.67,78.61},{21.1,78.36,23.45,76.32,23.45,76.32},{23.45,76.32,23.63,77.25,23.92,77.4},{24.2,77.54,24.78,77.29,25.38,76.86},{25.99,76.43,26.92,75.5,27.13,75.18},{27.35,74.86,27.99,73.83,27.99,73.83},{27.99,73.83,28.42,74.43,28.52,74.86},{28.63,75.29,28.63,77.11,28.77,77.25},{28.92,77.4,29.45,77.29,29.77,77.29},{30.09,77.29,30.81,77.07,30.81,77.07},{30.81,77.07,30.88,77.82,30.81,78.15},{30.74,78.47,30.59,79.32,30.7,79.5},{30.81,79.68,31.45,79.72,31.77,79.93},{32.09,80.14,32.49,80.07,32.2,80.57},{31.92,81.07,31.31,81.79,31.17,81.97},{31.02,82.14,30.92,82.25,31.13,82.39},{31.34,82.54,31.63,82.47,31.95,82.54},{32.27,82.61,32.74,82.96,32.63,83.29},{32.52,83.61,32.2,84.29,32.09,84.5},{31.99,84.71,31.77,84.68,31.74,84.96},{31.7,85.25,31.88,85.61,31.74,86},{31.59,86.39,30.92,87.14,30.59,87.53},{30.27,87.93,29.88,88.14,29.63,88.43},{29.38,88.71,29.17,88.64,29.09,88.86},{29.02,89.07,29.06,89.18,29.06,89.18}};

 double[][] chat_cube7  = {{37.73,95.64,37.52,94.82,37.48,94.53},{37.45,94.25,37.41,94.14,37.31,93.6},{37.2,93.07,36.98,91.6,37.09,91.14},{37.2,90.68,37.23,89.96,37.23,89.64},{37.23,89.32,36.95,87.14,37.09,86.89},{37.23,86.64,37.95,84.43,38.13,84.04},{38.31,83.64,38.41,82.39,38.38,81.22},{38.34,80.04,38.45,76.82,38.52,75.97},{38.59,75.11,38.77,70.47,38.95,69.18},{39.13,67.9,39.66,64.94,40.02,63.4},{40.48,62.15,41.38,59.58,42.02,58.8},{42.66,58.01,44.09,56.94,44.55,57.26},{45.02,57.58,45.16,58.19,44.95,59.22},{44.73,60.26,44.23,62.12,44.02,62.65},{43.8,63.19,43.07,65.18,43.07,65.18},{43.07,65.18,45.52,61.19,45.73,60.37},{45.94,59.55,46.84,56.3,45.55,55.8},{44.27,55.3,42.55,56.48,41.7,57.69},{39.91,59.86,38.74,64.45,38.06,68.04},{37.63,70.32,37.56,72.9,37.48,75.22},{37.41,77.54,37.52,80.12,37.38,82.07},{37.27,83.63,36.38,85.46,36.31,86.64},{36.23,87.82,36.13,90.03,36.09,90.85},{36.06,91.68,36.06,93.03,36.31,93.75},{36.56,94.46,37.56,95.53,37.56,95.53}};


 double[][] chat_cube8  = {{25.84,90.49,25.87,91.24,25.56,91.77},{25.25,92.3,24.59,93.02,24.56,93.18},{24.53,93.33,24.75,93.61,24.87,93.61},{25,93.61,25.19,93.64,25.19,93.64},{25.19,93.64,24.94,94.14,24.75,94.33},{24.56,94.52,24.41,95.02,24.09,95.21},{23.78,95.39,22.87,95.83,22.91,96.05},{22.94,96.27,23.69,97.05,24.37,97.36},{25.06,97.68,26.12,98.05,26.47,98.05},{26.81,98.05,27.31,97.83,27.97,97.99},{28.62,98.14,29.41,98.3,29.97,98.27},{30.53,98.24,31.56,98.02,31.94,97.86},{32.31,97.71,32.81,97.61,32.81,97.61},{32.81,97.61,32.44,97.52,32.91,97.55},{33.37,97.58,34.19,97.83,34.47,98.3},{34.75,98.77,35.06,99.64,35.12,99.77},{35.19,99.89,35.5,100.1,35.5,100.1},{35.5,100.1,35.75,99.77,35.62,99.3},{35.5,98.83,34.97,97.58,34.47,97.24},{33.97,96.89,32.81,96.55,31.84,96.77},{30.87,96.99,29.91,97.36,29.28,97.43},{28.66,97.49,27.72,97.36,27.41,97.43},{27.09,97.49,26.16,97.3,25.87,97.21},{25.59,97.11,24.78,96.46,24.69,96.33},{24.59,96.21,25.12,95.39,25.34,95.02},{25.56,94.64,26.22,93.93,26.16,93.74},{26.09,93.55,26.06,93.27,25.87,93.24},{25.69,93.21,25.53,93.14,25.53,93.14},{25.53,93.14,25.66,92.77,25.91,92.27},{26.16,91.77,25.84,90.49,25.84,90.49}};


 double[][] chat_cube9  = {{17.16,98.99,18.78,97.77,19.91,97.52},{21.03,97.27,22.25,97.05,23.16,96.99},{24.06,96.93,25.72,96.77,25.94,96.77},{26.16,96.77,26.59,96.55,26.59,96.55},{26.59,96.55,26.19,96.11,25.5,96.14},{24.81,96.18,22.53,96.3,21.97,96.36},{21.41,96.43,20.28,96.33,19.34,96.83},{18.41,97.33,17.63,98.05,17.47,98.24},{17.32,98.43,17.16,98.99,17.16,98.99}};

 
double[][] chat_cube10  = {{31.07,42.88,30.59,44.12,30.05,44.42},{28.41,45.35,26.32,43.31,26.32,43.31},{26.32,43.31,26.32,43.63,25.92,43.67},{25.52,43.72,24.17,43.27,23.64,43.27},{23.11,43.27,21.59,43.04,21.3,42.83},{20.84,42.5,20.42,42.52,20.37,42.7},{20.22,42.88,20.68,43.48,20.64,43.72},{20.42,43.8,18.76,44.11,17.9,44.73},{17.37,45.09,16.09,45.88,15.6,46.06},{15,46.34,14.19,46.32,13.97,46.32},{13.74,46.32,13.44,46.27,13.39,46.45},{13.35,46.63,14.19,47.12,14.27,47.56},{14.23,48,12.9,49.11,12.24,49.95},{11.58,50.79,9.899,52.07,9.59,52.33},{9.281,52.6,8.574,53.13,8.75,53.39},{8.927,53.66,9.59,53.84,9.634,54.06},{9.679,54.28,9.413,55.34,9.325,55.78},{9.237,56.22,8.618,57.59,8.441,58.12},{8.264,58.65,7.425,59.85,7.204,60.11},{6.983,60.38,6.32,60.82,6.541,60.91},{6.762,61,7.557,61.04,7.69,61.26},{7.822,61.48,7.646,61.84,7.292,62.81},{6.938,63.78,6.408,64.84,6.099,65.77},{5.789,66.7,5.436,68.42,5.436,69.35},{5.436,70.28,5.392,73.15,5.347,74.12},{5.303,75.09,5.215,75.76,5.082,76.6},{4.95,77.44,4.707,77.95,4.53,78.38},{4.177,78.74,4.088,79.29,3.956,79.91},{3.823,80.53,3.867,81.08,3.16,82.19},{2.453,83.29,1.567,84.39,1.679,84.77},{1.834,85.31,2.629,85.12,2.895,85.12},{3.16,85.12,4.287,85.35,4.287,85.35},{4.287,85.35,4.552,84.77,4.287,84.64},{4.022,84.51,3.138,84.51,3.138,84.51},{3.138,84.51,3.138,83.62,3.58,82.96},{4.022,82.3,4.773,81.5,4.95,80.79},{5.127,80.09,5.082,79.43,5.259,78.94},{5.435,78.46,5.767,78.32,5.812,77.83},{5.856,77.35,6.143,76.57,6.231,75.69},{6.319,74.8,6.276,70.01,6.32,69.17},{6.364,68.33,7.159,65.26,7.778,64.05},{7.999,63.38,8.927,61.61,8.927,61.44},{8.927,61.26,8.839,61.13,8.706,61},{8.574,60.86,8.043,60.48,8.043,60.48},{8.043,60.48,8.795,59.23,9.148,58.65},{9.502,58.08,10.28,55.87,10.54,55.3},{10.81,54.72,11.14,54.28,11.05,54.1},{10.96,53.92,10.39,53.7,10.39,53.39},{10.39,53.08,11.14,52.51,11.45,52.25},{11.76,51.98,12.73,50.83,13.04,50.61},{13.35,50.39,14.7,48.93,14.74,48.67},{14.79,48.4,15.12,47.7,15.16,47.47},{15.21,47.25,15.6,47.34,15.86,47.03},{16.13,46.72,16.62,46.1,17.37,45.75},{18.12,45.4,19.75,44.86,20.2,44.69},{20.64,44.51,20.71,44.54,21.01,44.27},{21.14,43.92,21.36,43.65,21.89,43.74},{22.42,43.83,23.14,44.24,23.58,44.29},{25.04,44.44,25.57,44.09,26.1,44.4},{26.63,44.71,28.15,45.7,28.73,45.62},{29.3,45.53,30.45,44.93,30.63,44.71},{30.81,44.49,31.07,42.88,31.07,42.88}};


double[][] chat_cube11  = {{3.094,85.21,3.531,85.71,3.5,86.49},{3.469,87.27,3.375,88.24,3.312,88.36},{3.25,88.49,3.562,88.64,3.719,88.64},{3.875,88.64,4.695,90.62,4.656,91.68},{4.598,93.26,3.719,95.43,3.219,95.8},{2.719,96.18,1.5,96.61,1.5,96.61},{1.5,96.61,1.437,96.96,1.594,96.99},{1.75,97.02,2.312,96.83,2.312,97.39},{2.312,97.96,2.156,98.68,2.062,99.39},{1.969,100.1,1.906,101.2,1.781,101.9},{1.656,102.6,1.312,103.8,1.219,104},{1.125,104.1,1,105,0.9687,105.1},{0.9375,105.3,1.156,105.8,1.156,105.8},{1.156,105.8,1.219,106.6,1.187,107.4},{1.156,108.2,1.094,109.6,1.125,110.5},{1.156,111.4,1.375,112.5,1.344,112.7},{1.312,113,1.281,113.3,1.5,113.3},{1.719,113.4,2.219,113.1,2.344,113.1},{2.469,113.1,2.75,113.1,2.75,113.7},{2.75,114.3,3.531,117.6,3.812,119},{4.094,120.3,5.187,122.7,5.375,123},{5.562,123.2,5.75,123.4,5.906,123.1},{6.062,122.8,6.719,121.9,6.719,121.9},{8.687,125.5,9.562,126.6,9.875,127.2},{10.19,127.7,10.66,127.9,10.72,127.9},{10.78,127.9,11.16,127.4,11.25,127.4},{11.34,127.4,12.28,127.7,12.75,128.2},{13.22,128.6,14.91,130.1,15.56,130.5},{16.22,130.9,17.47,131.5,17.66,131.6},{17.84,131.6,17.94,130.8,17.94,130.8},{17.94,130.8,19.94,131.7,20.31,131.9},{20.69,132.1,21.91,132.4,22.34,132.5},{22.78,132.6,24.5,133,24.5,133},{24.5,133,24.22,132,24.41,131.9},{24.59,131.8,26.69,132.1,27.09,132.1},{27.5,132.1,29.91,132.1,30.03,132},{30.16,131.9,30.03,131.7,30.12,131.6},{30.22,131.5,30.66,131.3,31.41,131.1},{32.16,130.9,34.28,130,34.44,129.9},{34.59,129.7,35.06,129.1,35.06,129.1},{34.72,129,35.31,128.5,35.62,128.2},{35.94,128,36.66,126.9,36.91,126.7},{37.16,126.5,37.62,125.4,37.75,125.3},{37.87,125.2,37.72,125.2,37.59,124.8},{37.47,124.5,37.31,123.9,37.59,123.5},{37.87,123.1,38.37,121,38.37,120.6},{38.37,120.3,38.31,119.5,38.22,119.5},{38.12,119.5,37.84,119.7,37.5,119.7},{37.16,119.7,37.19,119.5,37,119.1},{36.81,118.6,36.47,116.8,36.34,116.4},{36.22,116.1,36.06,115,35.72,114.5},{35.37,114.1,34.44,113.1,34,112.9},{33.56,112.6,32.3,112,30.97,112},{28.94,112,28.37,113.6,28.37,113.6},{29,113.4,29.28,112.8,30.37,112.7},{31.47,112.5,32.87,112.8,33.91,113.7},{34.72,114.6,35.25,115,35.56,115.9},{35.81,116.6,36.28,117.7,36.28,118.3},{36.28,118.8,36.53,120.1,36.66,120.3},{36.78,120.4,37.44,120.1,37.53,120.2},{37.62,120.4,37.53,121.5,37.44,121.8},{37.34,122.2,36.84,123.6,36.75,123.8},{36.66,124,36.31,124.8,36.44,125},{36.56,125.1,37.09,124.9,37.03,125.2},{36.97,125.6,36.56,126.2,36.19,126.6},{35.81,127.1,35.31,127.6,35.09,127.8},{34.87,128,34,128.5,33.91,128.7},{33.81,128.8,34.28,129.4,34.28,129.4},{34.28,129.4,33.91,129.5,33.25,129.8},{32.59,130.1,31.44,130.4,31.22,130.5},{31,130.6,29.87,130.6,29.75,130.7},{29.62,130.8,29.66,131.4,29.66,131.4},{29.66,131.4,28.69,131.6,27.81,131.5},{26.94,131.4,25.22,131,24.78,130.9},{24.34,130.9,24,130.6,23.87,130.7},{23.75,130.9,23.97,131.2,23.91,131.4},{23.84,131.5,23.75,132,23.75,132},{23.75,132,22.41,131.8,21.72,131.6},{21.03,131.4,18.91,130.1,18.69,130.1},{18.47,130.1,17.59,129.9,17.5,130},{17.41,130.1,17.44,130.5,17.34,130.5},{17.25,130.6,16.62,130.4,15.16,129.4},{13.69,128.4,11.69,126.8,11.53,126.7},{11.37,126.6,11.12,126.5,11,126.7},{10.87,126.8,10.66,126.9,10.66,126.9},{10.66,126.9,9.219,124.8,8.656,124},{8.094,123.1,7.094,121.7,7,121.5},{6.906,121.2,6.875,120.7,6.656,121},{6.437,121.2,6.219,121.6,6.094,121.8},{5.969,122.1,5.719,122.6,5.562,122.4},{5.406,122.2,4.469,119.9,4.437,119.4},{4.406,118.9,3.906,117.3,3.781,116.4},{3.656,115.5,3.469,112.8,3.344,112.5},{3.219,112.2,3.156,112.3,2.906,112.3},{2.656,112.4,2.312,112.8,2.219,112.4},{2.125,112,1.906,110.6,1.875,110.1},{1.844,109.5,1.969,108.8,1.969,108.4},{1.969,108,1.687,106.8,1.687,106.5},{1.687,106.1,1.375,105.7,1.375,105.7},{1.375,105.7,1.437,105.1,1.781,104.5},{2.125,103.9,2.875,101.1,2.937,100.4},{3,99.74,3.062,98.14,3.187,97.68},{3.312,97.21,3.5,96.39,3.875,96.08},{4.25,95.77,5.25,94.58,5.312,93.86},{5.375,93.14,5.803,91.25,5.562,90.05},{5.432,89.4,4.594,88.61,4.531,88.36},{4.469,88.11,4.594,87.46,4.562,86.86},{4.531,86.27,4.594,85.96,4.375,85.61},{4.156,85.27,3.094,85.21,3.094,85.21}};


 double[][] chat_cube12  = {{12.05,102.7,10.82,103.5,10.12,105.1},{9.178,107.2,8.506,109.8,8.909,112},{9.723,116.4,12.29,122.4,14.66,124.4},{18.22,127.3,23.79,128.6,28.24,127.3},{31.02,126.5,33.65,124,34.43,121.2},{34.84,119.7,33.5,116.8,32.62,115.8},{31.73,114.7,28.95,113.3,28.95,113.3},{28.42,113.7,28.77,113.8,30.14,114.6},{31.51,115.3,33.34,117.4,33.47,119.5},{33.68,122.7,32.39,124.1,31.6,124.7},{30.8,125.3,28.11,127,24.35,126.8},{20.49,126.6,17.56,126.3,13.79,122},{12.15,120.1,10.61,115.9,10.25,114.3},{9.899,112.7,9.635,110.2,9.899,108.2},{10.05,107,10.62,105.4,11.02,104.8},{11.42,104.2,12.09,103.1,12.09,103.1}};


double[][] chat_cube13  = {{47.35,95.05,47.73,93.81,48.57,94.01},{49.41,94.21,50.03,94.74,50.34,95.51},{50.65,96.28,51.09,96.66,51.25,97.37},{51.4,98.07,51.4,98.3,51.4,98.3},{51.4,98.3,51.84,98.87,51.82,99.56},{51.8,100.2,51.82,100.9,51.62,101.2},{51.42,101.5,51.09,102,50.93,102},{50.78,102,50.73,101.9,50.58,101.6},{50.43,101.4,50.03,101,49.96,101},{49.9,100.9,49.23,100.7,49.23,100.7},{49.54,100,49.9,99.97,50.18,100.2},{50.47,100.5,50.82,101,50.88,100.9},{50.95,100.8,50.95,100.5,50.93,100.2},{50.91,99.93,50.93,99.07,50.93,99.07},{50.93,99.07,50.51,98.34,50.25,97.77},{49.98,97.19,49.52,96.35,49.54,96.2},{49.56,96.04,49.52,95.86,49.52,95.86},{49.52,95.86,49.3,95.53,49.14,95.38},{48.99,95.22,48.97,95.05,48.57,95.03},{48.17,95,47.86,95.36,47.82,95.62},{47.77,95.89,47.84,96.24,47.84,96.24}};


double[][] chat_cube14  = {{45.65,96,45.54,95.62,45.83,95.31},{46.12,95,46.29,94.85,46.71,94.91},{47.13,94.98,47.38,95.03,47.38,95.03},{47.95,96.15,48.28,96.33,48.57,96.73},{48.86,97.12,49.47,97.77,49.54,98.38},{49.6,99,49.65,99.56,49.56,99.82},{49.48,100.1,49.34,100.5,49.25,100.9},{49.17,101.3,49.08,101.9,48.92,102},{48.77,102.2,48.64,102.5,48.46,102.3},{48.29,102.1,48.17,101.9,47.97,101.8},{47.77,101.6,47.51,101.3,47.35,101.3},{47.2,101.2,47,101.1,47,101.1},{47.24,100.4,47.51,100.6,47.69,100.8},{47.86,100.9,48.26,101.4,48.26,101.4},{48.26,101.4,48.28,101.5,48.48,100.9},{48.68,100.3,49.03,99.36,48.81,98.83},{48.59,98.3,48.33,97.52,48.17,97.43},{48.02,97.35,47.42,97.06,47.31,96.77},{47.2,96.48,47.09,96.06,46.93,95.95},{46.78,95.84,46.51,95.62,46.34,95.89},{46.16,96.15,46.14,96.46,46.14,96.46}};


double[][] chat_cube15  = {{44.13,96.28,44.35,95.91,44.66,95.84},{44.97,95.78,45.32,95.8,45.45,95.82},{45.59,95.84,46.03,96.33,46.14,96.48},{46.25,96.64,46.58,97.46,46.76,97.65},{46.93,97.85,47.11,98.11,47.2,98.51},{47.28,98.91,47.35,99.33,47.29,99.8},{47.22,100.3,47.2,101.1,47.09,101.2},{46.98,101.3,46.8,101.9,46.56,101.9},{46.32,102,46.14,102,46.09,101.9},{46.05,101.9,45.81,101.3,45.63,101.2},{45.45,101.1,44.57,100.8,44.57,100.8},{44.64,100.3,45.28,100.3,45.45,100.5},{45.63,100.7,46.29,101.1,46.29,101.1},{46.29,101.1,46.4,100.4,46.38,100.1},{46.32,99.6,46.51,98.98,46.38,98.67},{46.25,98.36,45.63,97.54,45.52,97.37},{45.41,97.19,45.34,96.62,45.01,96.59},{44.68,96.57,44.28,96.9,44.28,96.9}};


 double[][] chat_cube16  = {{41.41,96,41.52,95.67,41.79,95.47},{42.05,95.27,43,94.87,43.31,95.18},{43.62,95.49,43.97,95.98,44.04,96.06},{44.11,96.15,44.44,96.75,44.37,97.04},{44.3,97.32,44.17,97.65,44.28,98.05},{44.39,98.45,44.64,99.07,44.64,99.6},{44.64,100.1,44.75,100.8,44.46,101.1},{44.17,101.5,44.08,101.9,43.91,102},{43.73,102.1,43.51,102.1,43.35,102},{43.2,101.9,43.09,101.7,42.91,101.6},{42.74,101.4,42.47,101.3,42.32,101.2},{42.16,101.2,42.29,100.6,42.29,100.6},{42.29,100.6,42.76,100.7,42.96,100.8},{43.16,100.9,43.11,101.1,43.29,101.1},{43.46,101,43.55,100.8,43.62,100.5},{43.69,100.2,43.75,99.62,43.77,99.47},{43.8,99.31,43.8,99.09,43.71,98.78},{43.62,98.47,43.38,98.43,43.4,98.23},{43.42,98.03,43.31,97.43,43.38,97.28},{43.44,97.12,43.44,96.75,43.31,96.59},{43.18,96.44,42.89,96.11,42.69,96.13},{42.49,96.15,42.25,96.26,42.12,96.48},{41.98,96.7,41.85,96.93,41.85,96.93}};


double[][] chat_cube17  = {{37.96,96.28,38.47,95.4,38.74,95.22},{39,95.05,39.69,94.47,40.08,94.67},{40.48,94.87,40.88,95.38,41.01,95.56},{41.14,95.73,41.85,96.84,41.94,97.08},{42.03,97.32,42.32,97.74,42.32,98.3},{42.32,98.85,42.16,99.84,42.18,100.1},{42.21,100.3,42.29,101.2,42.29,101.2},{42.29,101.2,42.18,101.1,41.98,101.2},{41.79,101.3,41.39,101.8,41.3,101.8},{41.21,101.9,40.86,102,40.72,101.9},{40.59,101.8,40.59,101.2,40.35,101.1},{40.11,101.1,39.6,101.1,39.6,101.1},{39.77,100.4,40.19,100.3,40.5,100.5},{40.81,100.7,40.99,101.1,40.99,101.1},{41.23,101.1,41.3,100.3,41.34,99.67},{41.39,99.05,41.34,98.23,41.3,97.79},{41.26,97.35,40.84,97.12,40.57,96.7},{40.31,96.28,40.5,95.93,40.28,95.8},{40.06,95.67,39.69,95.69,39.4,95.84},{39.11,96,38.76,96.31,38.69,96.42},{38.63,96.53,38.43,97.04,38.43,97.04}};

 
double[][] chat_cube18  = {{36.57,96.84,36.7,96.33,36.84,96.2},{36.97,96.06,37.06,95.8,37.21,95.78},{37.37,95.75,37.81,95.84,37.94,96.15},{38.07,96.46,38.78,97.57,39,97.99},{39.22,98.41,39.6,99.42,39.69,99.73},{39.77,100,39.77,100.5,39.71,100.7},{39.64,100.9,39.66,101.4,39.4,101.5},{39.13,101.5,39.09,101.2,38.85,101.3},{38.6,101.5,38.54,101.5,38.27,101.7},{38.01,101.8,37.81,101.5,37.81,101.5},{37.81,101.5,37.81,101.2,38.05,101.1},{38.29,101,38.89,100.9,38.89,100.9},{38.89,100.9,39,100.3,38.98,100.1},{38.96,99.84,39,99.58,38.78,99.36},{38.56,99.14,38.18,98.76,38.05,98.41},{37.92,98.05,38.05,97.52,37.87,97.32},{37.7,97.12,37.59,97.08,37.43,97.06},{37.28,97.04,36.92,97.04,36.79,97.01},{36.66,96.99,36.57,96.84,36.57,96.84}};


 double[][] chat_cube19  = {{32.68,96.42,33.04,95.89,33.41,95.8},{33.79,95.71,34.21,95.38,34.6,95.42},{35,95.47,35.58,95.67,35.71,96.04},{35.84,96.42,35.78,96.84,35.93,97.19},{36.08,97.54,37.15,98.07,37.21,98.91},{37.28,99.75,37.3,101.1,37.19,101.3},{37.08,101.5,36.97,102.1,36.84,102.3},{36.7,102.4,36.35,102.6,36.24,102.6},{36.13,102.6,36.13,102.3,36.11,102.1},{36.08,102,36,101.7,35.84,101.5},{35.69,101.4,35.49,101.5,35.38,101.5},{35.27,101.6,34.98,101.9,34.98,101.9},{34.98,101.9,34.43,101.5,34.16,101.5},{33.9,101.4,33.19,101.9,33.12,101.9},{33.06,101.9,32.77,101.5,32.77,101.5},{32.77,101.5,32.99,101.4,32.77,101.4},{32.55,101.3,31.95,101.3,31.95,101.3},{31.95,101.3,32.44,100.9,32.7,100.8},{32.97,100.8,33.39,101.1,33.39,101.1},{33.39,101.1,33.63,100.7,34.14,100.8},{34.65,100.9,34.78,101.3,34.78,101.3},{34.78,101.3,35.36,100.6,35.71,100.8},{36.06,100.9,36.39,101.2,36.44,101.2},{36.48,101.2,36.48,100.9,36.5,100.6},{36.53,100.2,36.84,99.49,36.5,99.09},{36.17,98.69,35.71,98.07,35.55,97.77},{35.4,97.46,35.38,96.84,35.16,96.55},{34.94,96.26,34.63,96.11,34.38,96.2},{34.14,96.28,33.61,96.4,33.45,96.46},{33.3,96.53,32.99,96.66,32.99,96.66}};


double[][] chat_cube20  = {{32.75,16.83,34.84,18.02,35.59,18.33},{36.34,18.64,38.06,19.49,38.31,19.46},{38.56,19.43,38.97,19.21,39.16,19.27},{39.34,19.33,39.62,19.52,39.84,19.52},{40.06,19.52,40.25,19.68,40.5,19.55},{40.75,19.43,41.28,18.71,41.5,18.62},{41.72,18.52,42.34,18.58,42.5,18.43},{42.66,18.27,42.84,17.99,43.31,17.86},{43.78,17.74,44.81,17.86,45.16,18.08},{45.5,18.3,45.75,18.43,46.09,18.46},{46.44,18.49,47.34,18.18,47.62,17.96},{47.91,17.74,48.37,17.43,48.69,17.55},{49,17.68,49.5,17.49,49.72,17.8},{49.94,18.11,50.22,18.36,50.5,18.64},{50.78,18.93,50.87,19.24,51.28,19.27},{51.69,19.3,52,19.24,52.28,19.27},{52.56,19.3,53.16,19.61,53.34,19.64},{53.53,19.68,54.47,19.33,54.91,19.18},{55.34,19.02,56.59,18.46,56.97,18.24},{57.34,18.02,58.87,17.3,58.87,17.3},{58.87,17.3,57.87,18.14,57.47,18.36},{57.06,18.58,55.75,19.08,55.5,19.3},{55.25,19.52,54.78,19.89,54.31,20.05},{53.84,20.21,53.41,20.3,53.12,20.27},{52.84,20.24,52.47,20.05,52.25,20.02},{52.03,19.99,51.56,20.18,51.37,20.11},{51.19,20.05,50.97,19.74,50.66,19.58},{50.34,19.43,50,18.83,49.72,18.74},{49.44,18.64,49.16,18.49,48.78,18.46},{48.41,18.43,47.75,18.58,47.44,18.83},{47.12,19.08,46.59,19.27,46.22,19.27},{45.84,19.27,45.22,18.86,45.03,18.8},{44.84,18.74,44.5,18.36,44.22,18.36},{43.94,18.36,43.56,18.33,43.25,18.49},{42.94,18.64,42.44,18.8,42.22,18.96},{42,19.11,41.47,19.27,41.37,19.39},{41.28,19.52,41.34,19.83,40.81,19.96},{40.28,20.08,39.78,19.99,39.62,19.96},{39.47,19.93,39.22,19.89,39,19.86},{38.78,19.83,38.34,19.96,38.16,19.89},{37.97,19.83,36.94,19.43,36.44,19.21},{35.94,18.99,34.97,18.58,34.56,18.36},{34.16,18.14,32.75,16.83,32.75,16.83}};


double[][] chat_cube21  = {{39.19,20.68,39.75,21.08,40.19,21.11},{40.62,21.14,42,21.58,42.59,21.71},{43.19,21.83,44.22,22.3,44.44,22.33},{44.66,22.36,45.28,22.83,45.5,23.05},{45.72,23.27,45.81,23.8,45.78,24.18},{45.75,24.55,45.59,24.83,45.47,24.99},{45.34,25.14,44.84,25.46,44.78,25.64},{44.72,25.83,44.34,26.27,44.03,26.43},{43.72,26.58,42.37,26.39,41.91,26.3},{41.44,26.21,40.37,25.64,39.75,24.86},{39.12,24.08,38.91,23.58,38.81,22.96},{38.72,22.33,38.5,21.83,38.66,21.55},{38.81,21.27,39.41,21.83,39.41,21.83},{39.41,21.83,39.06,22.39,39.47,23.27},{39.87,24.14,40.53,24.96,40.97,25.27},{41.41,25.58,42.43,25.95,42.97,25.93},{43.68,25.9,44.22,25.58,44.5,25.36},{44.78,25.14,45.13,24.21,45.06,23.89},{45,23.58,44.75,23.08,44.28,22.89},{43.81,22.71,42.94,22.49,42.25,22.36},{41.56,22.24,40.75,21.99,40.47,21.89},{40.19,21.8,39.99,21.54,39.73,21.59},{39.6,21.61,39.44,21.86,39.44,21.86}};


 double[][] chat_cube22  = {{53.57,21.15,53.29,20.96,52.85,20.99},{52.42,21.02,51.04,21.46,50.45,21.59},{49.73,21.9,48.98,22.3,48.76,22.33},{48.54,22.36,48.17,22.68,47.95,22.9},{47.73,23.12,47.51,23.68,47.54,24.06},{47.57,24.43,47.61,24.77,47.73,24.93},{47.86,25.08,48.2,25.34,48.26,25.52},{48.32,25.71,48.98,25.99,49.29,26.15},{49.6,26.3,50.67,26.27,51.13,26.18},{51.6,26.09,52.67,25.52,53.29,24.74},{53.92,23.96,54.13,23.46,54.23,22.84},{54.32,22.21,54.23,21.83,54.07,21.55},{53.92,21.27,53.63,21.71,53.63,21.71},{53.63,21.71,53.98,22.27,53.57,23.15},{53.17,24.02,52.51,24.84,52.07,25.15},{51.63,25.46,50.61,25.83,50.07,25.81},{49.36,25.78,48.82,25.46,48.54,25.24},{48.26,25.02,48.07,24.12,48.14,23.8},{48.2,23.49,48.45,23.08,48.92,22.89},{49.39,22.71,50.17,22.46,50.79,22.24},{51.31,22.05,52.07,21.77,52.35,21.68},{52.63,21.59,53.07,21.43,53.2,21.49},{53.32,21.56,53.6,21.74,53.6,21.74}};


double[][] chat_cube23  = {{44.66,22.37,45.5,22.33,45.79,22.17},{46.07,22.02,46.56,21.8,46.78,21.8},{47,21.8,47.38,22.17,47.53,22.22},{47.69,22.26,48.46,22.5,48.46,22.5},{47.8,23.21,47.4,23.03,47.29,22.97},{47.18,22.9,47.09,22.59,46.89,22.55},{46.69,22.5,46.4,22.68,46.32,22.75},{46.23,22.81,45.94,22.94,45.81,22.94},{45.67,22.94,45.48,22.99,45.48,22.99}};

 
double[][] chat_cube24  = {{47.82,27.1,48.47,26.84,48.66,26.53},{48.85,26.22,48.94,25.82,48.75,25.66},{48.56,25.5,48.08,25.03,47.8,25},{47.52,24.97,47,25.21,46.69,25.19},{46.37,25.18,45.92,24.97,45.62,24.99},{45.33,25,44.8,25.47,44.66,25.8},{44.52,26.13,44.69,26.77,44.92,26.91},{45.04,26.99,45.41,27.25,45.52,27.25},{45.62,27.25,45.95,27.16,45.83,27.07},{45.7,26.97,45.53,26.86,45.42,26.75},{45.31,26.64,45.03,26.5,45.06,26.32},{45.09,26.13,45.09,25.71,45.23,25.55},{45.37,25.39,45.83,25.27,46.03,25.35},{46.23,25.43,46.44,25.68,46.59,25.61},{46.75,25.55,46.94,25.49,47.27,25.57},{47.42,25.49,47.52,25.33,47.77,25.43},{48.02,25.52,48.39,25.66,48.36,25.83},{48.33,26,48.3,26.16,48.09,26.28},{47.89,26.41,47.67,26.57,47.59,26.63},{47.52,26.69,47.38,26.85,47.47,26.97},{47.57,27.1,47.82,27.1,47.82,27.1}};


double[][] chat_cube25  = {{39.49,30.21,39.53,29.41,39.53,29.02},{39.53,28.63,39.7,28.05,40.03,27.83},{40.36,27.61,40.55,27.46,40.84,27.49},{41.27,27.54,41.49,27.83,41.62,28.14},{42.04,29.16,42.21,29.85,42.96,30.08},{44.21,30.46,45.05,29.86,45.48,29.43},{45.92,28.99,46.25,28.35,46.33,27.72},{46.41,27.1,46.45,26.8,46.45,26.71},{46.45,26.61,46.26,26.54,46.26,26.46},{46.26,26.38,46.38,26.06,46.25,25.94},{46.09,25.8,45.7,25.8,45.61,25.99},{45.52,26.18,45.53,26.5,45.64,26.53},{45.75,26.57,45.87,26.61,45.86,26.78},{45.84,26.96,45.8,27.35,45.7,27.69},{45.61,28.03,45.37,28.64,45.2,28.86},{45.03,29.08,44.39,29.65,43.87,29.69},{43.35,29.73,42.69,29.55,42.44,29.08},{42.19,28.61,42.28,28.03,41.83,27.5},{41.54,27.16,40.81,27.08,40.53,27.16},{40.25,27.24,39.64,27.49,39.37,27.85},{39.01,28.33,38.91,29.28,38.92,29.6},{38.94,29.91,39,30.36,39.12,30.41},{39.25,30.46,39.49,30.21,39.49,30.21}};

 
double[][] chat_cube26  = {{52.35,30.01,52.23,29.35,52.36,28.98},{52.48,28.62,52.67,28.23,52.56,27.88},{52.43,27.47,52.12,27.2,51.78,27.21},{51.19,27.23,51.01,27.72,50.88,28.03},{50.46,29.05,50.44,29.56,49.79,29.79},{48.56,30.22,47.87,29.91,47.44,29.48},{47,29.04,46.67,28.4,46.59,27.77},{46.51,27.15,46.47,26.85,46.47,26.76},{46.47,26.66,46.66,26.59,46.66,26.51},{46.66,26.43,46.54,26.11,46.67,25.99},{46.83,25.85,47.22,25.85,47.31,26.04},{47.4,26.23,47.39,26.55,47.28,26.58},{47.17,26.62,47.05,26.66,47.06,26.83},{47.08,27.01,47.12,27.4,47.22,27.74},{47.31,28.08,47.55,28.69,47.72,28.91},{47.89,29.13,48.1,29.48,48.99,29.49},{49.51,29.5,49.9,29.33,50.15,28.86},{50.4,28.39,50.34,27.61,50.79,27.08},{51.08,26.74,52,26.65,52.28,26.73},{52.56,26.81,52.94,27.32,53,27.84},{53.07,28.4,52.89,29.22,52.88,29.54},{52.86,29.85,52.78,30.05,52.66,30.1},{52.53,30.15,52.35,30.01,52.35,30.01}};


 double[][] chat_cube27  = {{45.08,30.66,45.33,30.39,45.64,30.27},{45.95,30.14,46.61,30.07,47.02,30.22},{47.42,30.38,47.8,30.61,47.87,30.64},{47.95,30.68,47.69,31.04,47.5,31.11},{47.16,31.23,46.59,31.35,46.08,31.18},{45.56,31,45.06,30.71,45.06,30.71},{44.3,30.82,44.53,31.25,44.72,31.39},{45.2,31.75,45.81,32.01,46.41,32.03},{47.33,32.06,48.34,31.46,48.5,31.33},{48.66,31.21,48.81,30.8,48.7,30.6},{48.59,30.39,47.45,29.33,46.69,29.41},{45.92,29.49,45.33,29.58,45,29.85},{44.67,30.11,44.34,30.72,44.34,30.72}};

 
double[][] chat_cube28  = {{47.95,20.12,49.5,17.33,50.91,15.08},{52.33,12.82,54.13,9.676,56.44,7.609},{58.96,5.357,62.31,4.648,62.31,4.648}};


double[][] chat_cube29  = {{48.57,21.93,49.45,19.58,50.12,18.52},{51.8,15.86,54.58,12.74,56.21,11.28},{57.85,9.819,60.24,8.626,61.43,8.537},{62.62,8.449,64.26,8.581,64.26,8.581}};


double[][] chat_cube30  = {{43.8,19.76,43,16.09,42.65,14.5},{42.29,12.91,40.88,9.421,40.04,7.963},{39.2,6.504,36.55,3.853,36.55,3.853}};


double[][] chat_cube31  = {{42.6,20.07,41.9,17.91,41.37,16.23},{40.84,14.55,38.86,10.75,37.39,9.068},{36.4,7.923,33.45,7.167,33.45,7.167}};


double[][] chat_cube32  = {{44.95,27.36,41.8,26.81,39.77,26.52},{37.31,26.16,34.83,25.56,32.57,25.24},{26.87,24.58,21.88,26.21,21.88,26.21}};

 
double[][] chat_cube33  = {{44.55,28.2,40.35,27.5,38.1,27.36},{35.84,27.23,30.49,26.48,27.8,27.63},{25.1,28.78,21.83,30.63,21.17,31.08},{20.51,31.52,19.49,32.31,19.49,32.31}};

 
double[][] chat_cube34  = {{48.52,27.37,51.97,27.05,54.23,27.15},{55.99,27.23,57.89,27.27,59.53,27.41},{61.16,27.54,66.25,28.16,67.31,28.43},{68.37,28.69,69.61,29,69.61,29}};

 
double[][] chat_cube35  = {{48.39,29,50.6,29.22,51.97,29.62},{53.34,30.02,57.19,31.56,58.83,32.36},{60.46,33.15,63.9,35.1,64.74,35.94},{65.58,36.78,67.04,38.85,67.04,38.85}};


double[][] chat_cube36  = {{44.37,28.95,42.03,28.73,40.35,29.09},{38.67,29.44,35.52,29.79,33.19,30.5},{30.9,31.2,27.53,32.71,26.56,33.29},{25.59,33.86,24.17,35.01,24.17,35.01}};


double[][] chat_cube37  = {{39.73,21.53,41.01,21.82,41.61,22.08},{42.21,22.35,43.95,22.48,44.24,22.75},{44.53,23.01,45.17,23.3,45.08,23.87},{44.99,24.45,45.08,25.26,44.35,25.57},{43.62,25.88,41.87,25.91,41.23,25.49},{40.59,25.07,39.64,24.05,39.51,23.65},{39.38,23.25,39.16,22.52,39.24,22.3},{39.33,22.08,39.73,21.53,39.73,21.53}};


double[][] chat_cube38  = {{41.78,22.92,41.84,23.27,41.84,23.96},{41.84,24.64,41.87,25.17,42.01,25.15},{42.13,25.13,42.14,24.39,42.13,24.01},{42.12,23.64,42.15,22.93,41.93,22.93}};

 
double[][] chat_cube39  = {{53.41,21.53,53.36,21.46,53.06,21.51},{52.75,21.55,50.82,22.15,50.18,22.39},{49.54,22.64,48.35,23.01,48.22,23.41},{48.08,23.81,48.04,25,48.48,25.29},{48.92,25.57,50.49,26.06,51.11,25.75},{51.73,25.44,52.99,24.4,53.23,24.07},{53.47,23.74,53.78,22.79,53.78,22.41},{53.78,22.04,53.41,21.53,53.41,21.53}};


double[][] chat_cube40  = {{50.51,22.83,50.57,23.18,50.57,23.87},{50.57,24.55,50.6,25.08,50.74,25.06},{50.86,25.04,50.87,24.3,50.86,23.92},{50.85,23.55,50.88,22.84,50.66,22.84}};


 double[][] chat_cube41  = {{53.78,35.57,54.27,35.14,54.59,35.57},{54.85,35.92,54.95,36.36,55.13,36.75},{55.37,37.28,55.61,37.81,55.84,38.34},{56.29,39.42,57.01,40.58,57.14,41.59},{57.28,42.61,56.75,45,56.57,46.01},{56.39,47.03,56.04,48.4,55.99,49.9},{55.95,51.41,56.13,53.27,55.62,54.2},{55.18,55.01,53.61,56.27,52.72,56.89},{51.84,57.5,50.07,58.65,49.63,59.14},{49.19,59.63,48.04,60.91,47.6,61.48},{47.16,62.06,45.79,63.91,45.56,64.53},{45.34,65.15,44.99,66.25,44.68,66.92},{44.37,67.58,44.06,67.45,43.8,68.38},{43.53,69.3,43.58,70.28,43.4,71.25},{43.22,72.22,43.22,73.46,43.05,74.12},{42.87,74.78,42.6,75.58,42.6,76.2},{42.6,76.82,43.05,78.36,43.13,79.07},{43.22,79.78,43.93,81.59,43.88,82.16},{43.84,82.74,43.27,83.62,43.09,84.07},{42.91,84.51,42.74,84.46,42.51,85.44},{42.29,86.41,42.47,87.87,42.47,88.44},{42.47,89.01,42.34,89.72,42.51,90.47},{42.69,91.22,42.6,91.14,43.18,92.06},{43.75,92.99,44.24,94.32,44.24,94.32},{44.24,94.32,44.62,94.24,44.93,94.41},{45.24,94.59,45.62,94.88,45.62,94.88},{45.62,94.88,46.08,94.39,46.39,94.34},{46.65,94.3,47.14,94.57,47.14,94.57},{47.14,94.57,47.78,93.43,48.32,93.45},{49.74,93.49,50.65,95.42,51.09,96.17},{51.53,96.93,51.75,97.59,51.93,98.21},{52.1,98.83,52.32,100.1,52.1,100.8},{51.88,101.4,51.88,101.8,51.22,102},{50.56,102.2,50.16,101.8,49.98,101.6},{49.81,101.4,49.56,101.2,49.56,101.2},{49.56,101.2,49.63,101.5,49.32,102},{49.01,102.5,49.1,102.8,48.66,102.8},{48.22,102.7,47.64,101.9,47.46,101.8},{47.29,101.7,47.2,101.7,47.2,101.7},{47.2,101.7,46.61,102.5,46.35,102.6},{46.08,102.6,45.96,102,45.61,101.7},{45.25,101.4,44.86,101.2,44.86,101.2},{44.86,101.2,44.68,101.6,44.42,101.8},{44.15,102.1,43.8,102.5,43.49,102.4},{43.18,102.2,42.6,101.8,42.25,101.7},{41.9,101.5,41.63,101.8,41.37,101.9},{41.1,102,40.75,102.2,40.48,102},{40.22,101.8,40.04,101.4,40.04,101.4},{40.04,101.4,39.51,101.8,39.29,101.8},{39.07,101.8,38.49,102.1,38.18,102},{37.87,102,37.74,101.6,37.57,101.9},{37.39,102.1,37.52,102.2,37.3,102.4},{37.08,102.5,36.9,102.6,36.64,102.7},{36.37,102.8,36.11,102.9,35.97,102.8},{35.84,102.7,36.06,101.8,35.84,101.8},{35.62,101.9,35.18,102.2,35.18,102.2},{35.18,102.2,34.83,101.8,34.38,101.8},{33.94,101.9,32.81,102.2,32.81,102.2},{32.81,102.2,32.44,102.4,32,102.2},{31.56,102.1,29.87,101.8,29.25,101.8},{28.62,101.8,24.75,101.5,23.5,101.6},{22.25,101.6,17.94,101.5,17.37,101.6},{16.81,101.7,15.62,101.6,15.12,101.7},{14.62,101.9,14.12,102.4,13.87,102.6},{13.62,102.8,13.62,102.7,13.25,102.6},{12.87,102.6,12.62,103.2,12.5,103.4},{12.37,103.7,11,105.1,10.62,107.1},{10.25,109,10.05,113.6,11.31,116.5},{13.06,120.5,15.69,125.1,20.25,126.1},{25.19,127.2,30.27,126.1,32.25,123.9},{34.01,122,33.51,119,31.62,116.1},{30.83,114.9,27.75,114.2,27.75,113.7},{27.75,113.3,28.75,112.3,29.31,111.9},{29.87,111.4,31.69,111.2,33.06,111.8},{34.44,112.4,35.81,114.2,35.81,114.2},{35.81,114.2,36,114.4,36.31,114.5},{36.62,114.6,36.94,116,37.12,116.5},{37.31,117,37.69,118.9,37.69,118.9},{37.69,118.9,38.44,118.9,38.56,119.2},{38.69,119.6,38.75,121.8,38.62,122.2},{38.5,122.6,38.28,124.4,38.28,124.4},{38.28,124.4,38.31,125.1,38.19,125.4},{38.06,125.8,37.44,126.7,37.06,127.2},{36.69,127.7,35.44,128.8,35.44,128.8},{35.44,128.8,35.45,129.2,35.25,129.4},{34.5,130.3,34.31,130.4,33.62,130.6},{32.94,130.8,30.81,131.6,30.81,131.6},{30.69,132.2,29.62,132.5,28.5,132.5},{27.37,132.5,24.87,132.4,24.87,132.4},{24.87,133,24,133.1,23.25,133},{22.5,132.9,18.25,131.4,18.25,131.4},{18,131.9,16.56,131.4,15.81,131.1},{15.06,130.7,11.69,128,11.69,128},{11.69,128,11.25,128.5,10.81,128.7},{10.37,128.9,8.75,127.6,8,126.4},{7.25,125.2,6.687,123.5,6.687,123.5},{6.687,123.5,6.187,124.6,5.875,124.6},{5.562,124.5,4,122.2,3.75,121.5},{3.5,120.8,3.125,119.2,2.875,119.2},{2.625,119.1,2.5,119,2.437,118.2},{2.375,117.5,2,114.3,2,114.3},{2,114.3,1.687,114.7,1.312,114.7},{0.9375,114.8,0.75,114,0.75,113.4},{0.75,112.9,0.875,111.9,0.75,111.1},{0.625,110.3,0.8125,108.2,0.875,107.7},{0.9375,107.3,0.625,105.8,0.625,105.8},{0.625,105.8,-0.5625,105.4,-0.5,105.1},{-0.4375,104.9,0.125,102.9,0.4375,102.2},{0.75,101.5,1.562,99.05,1.625,98.74},{1.687,98.43,2.125,98.05,1.812,97.8},{1.5,97.55,1.75,97.55,1.625,97.3},{1.5,97.05,1.187,96.74,1.187,96.74},{1.187,96.74,2,96.3,2.687,95.49},{3.375,94.68,4.125,92.86,4,91.55},{3.875,90.24,3.437,88.86,3.437,88.86},{3.437,88.86,2.812,88.8,2.812,88.55},{2.812,88.3,3.062,86.49,2.875,86.18},{2.687,85.86,2.562,85.55,2.562,85.55},{2.562,85.55,1.75,85.61,1.437,85.3},{1.125,84.99,1.375,83.93,1.812,83.36},{2.25,82.8,3.125,81.55,3.187,81.18},{3.25,80.8,3.25,79.43,3.562,78.93},{3.875,78.43,4.625,78.3,4.437,77.86},{4.25,77.43,3.937,76.99,4.187,76.68},{4.437,76.36,4.812,76.49,4.875,75.86},{4.937,75.24,5.062,72.3,5.125,70.86},{5.187,69.43,4.75,67.99,5.125,67.24},{5.5,66.49,6.5,63.74,6.812,63.05},{7.125,62.36,7.5,61.8,7.125,61.68},{6.75,61.55,5.875,61.3,5.812,61.05},{5.75,60.8,7.25,59.3,7.625,58.55},{8,57.8,9.25,54.36,9.25,54.36},{9.25,54.36,8.5,53.93,8.312,53.49},{8.125,53.05,8.75,52.36,9.062,52.18},{9.375,51.99,12.44,49.3,12.75,48.86},{13.06,48.43,13.62,47.99,13.44,47.68},{13.25,47.36,12.56,46.68,12.62,46.49},{12.69,46.3,12.94,45.8,13.25,45.8},{13.56,45.8,14.5,45.99,14.87,45.93},{15.25,45.86,16.94,44.49,17.5,44.24},{18.06,43.99,18.87,43.49,19.31,43.43},{19.75,43.36,18.94,42.18,19.5,41.99},{20.06,41.8,21.5,42.55,22.12,42.61},{22.75,42.68,24.06,42.93,24.56,42.93},{25.06,42.93,25.5,43.24,25.5,43.24},{25.5,43.24,25.75,42.68,26.06,42.61},{26.37,42.55,27.31,43.68,27.94,43.86},{28.56,44.05,29.75,44.55,30.25,43.36},{30.75,42.18,31.06,40.68,31.25,40.05},{31.44,39.43,31.87,39.05,32.06,38.55},{32.25,38.05,32.69,37.55,32.81,37.05},{32.94,36.55,33.2,36.31,33.47,35.99},{33.8,35.59,34.62,34.93,34.62,34.93},{34.62,34.93,34.54,34.49,34.56,34.11},{34.68,32.06,33.75,31.11,33.37,30.68},{33,30.24,32.78,29.58,32.84,29.18},{32.91,28.77,33.87,27.86,33.87,27.86},{33.87,27.86,33.78,27.46,34.09,27.05},{34.41,26.64,34.97,26.27,34.91,25.96},{34.84,25.64,34.41,25.05,34.47,24.93},{34.53,24.8,34.87,24.3,34.72,23.96},{34.56,23.61,33.12,22.89,32.56,22.39},{32,21.89,30.44,19.77,30.44,19.14},{30.44,18.52,30.53,16.61,31.09,16.39},{31.66,16.18,32.78,16.49,33.78,17.14},{34.78,17.8,36.94,18.61,37.56,18.83},{38.19,19.05,38.34,19.18,38.53,19.18},{38.72,19.18,38.94,19.02,39.16,19.02},{39.37,19.02,39.84,19.46,40.16,19.33},{40.47,19.21,40.84,18.86,41.06,18.71},{41.28,18.55,41.72,18.3,41.91,18.24},{42.09,18.18,42.53,18.05,42.69,17.93},{42.84,17.8,43.03,17.61,43.5,17.52},{43.97,17.43,44.62,17.33,44.97,17.61},{45.31,17.89,45.87,18.14,46.12,18.14},{46.37,18.14,47.28,17.83,47.69,17.55},{48.09,17.27,49.03,17.08,49.37,17.21},{49.72,17.33,50.41,18.14,50.66,18.39},{50.91,18.64,51.06,18.93,51.34,18.93},{51.62,18.93,51.91,18.83,52.16,18.93},{52.41,19.02,53,19.49,53.56,19.36},{54.12,19.24,55.72,18.61,56.22,18.36},{56.72,18.11,58.22,17.36,58.59,17.14},{58.97,16.93,59.84,16.24,60.31,16.46},{60.78,16.68,61.19,17.08,60.97,18.14},{60.75,19.21,59.31,21.55,58.97,22.05},{58.62,22.55,57.41,23.61,57.28,23.77},{57.16,23.93,56.56,24.11,56.41,24.27},{56.25,24.43,56.53,24.77,56.47,25.02},{56.41,25.27,56.69,25.58,56.53,25.86},{56.37,26.14,56.16,26.33,56.16,26.43},{56.16,26.52,56.37,26.89,56.34,27.05},{56.31,27.21,56.31,27.46,56.5,27.49},{56.69,27.52,57.25,28.11,57.19,28.3},{57.12,28.49,57.16,29.08,57.09,29.33},{57.03,29.58,57.53,30.18,57.34,30.49},{57.16,30.8,56.56,31.18,56.56,31.18},{56.56,31.18,56.16,31.3,56.09,31.39},{56.03,31.49,55.97,31.77,55.63,32.05},{55.28,32.33,54.62,32.71,54.34,32.83},{53.94,33.02,53.51,33.13,53.09,33.27},{53.09,33.27,53.24,34.12,53.39,34.52}};

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Note that for this format of declaration the keyword new" is not needed.
/*
MoveTo[] all_movetos = { moveTo1, moveTo2, moveTo3, moveTo4,
moveTo5, moveTo6, moveTo7, moveTo8,
moveTo9, moveTo10, moveTo11, moveTo12,
moveTo13, moveTo14, moveTo15, moveTo16,
moveTo17, moveTo18, moveTo19, moveTo20,
moveTo21, moveTo22, moveTo23, moveTo24,
moveTo25, moveTo26, moveTo27, moveTo28,
 moveTo29, moveTo30, moveTo31, moveTo32,
moveTo33, moveTo34, moveTo35, moveTo36,
 moveTo37, moveTo38, moveTo39, moveTo40,
moveTo41
 };
*/

//double[][][] all_pps = { chat_cube1, chat_cube1b, chat_cube2, chat_cube3, chat_cube4};

double[][][] all_pps = { chat_cube1, chat_cube1b, chat_cube2, chat_cube3, chat_cube4,
chat_cube5,chat_cube6, chat_cube7, chat_cube8,
chat_cube9,chat_cube10, chat_cube11, chat_cube12,
chat_cube13,chat_cube14, chat_cube15, chat_cube16,
chat_cube17,chat_cube18, chat_cube19, chat_cube20,
chat_cube21,chat_cube22, chat_cube23, chat_cube24,
chat_cube25,chat_cube26, chat_cube27, chat_cube28,
chat_cube29,chat_cube30, chat_cube31, chat_cube32,
chat_cube33,chat_cube34, chat_cube35, chat_cube36,
chat_cube37,chat_cube38, chat_cube39, chat_cube40,
chat_cube41
  };

//===================================================================================
//===================================================================================
    public void start(Stage primaryStage) 
    {
        Group rootgroup = new Group();
        Path[] rand_paths =  new Path[6]; 

       Path line_path;
       double[][] cube_points;
       //double[][] cube_pts_transformed;
       MoveTo moveTo1 = new MoveTo();
       int num_paths = Array.getLength(all_pps) ; // Number of paths.

      // No Transform applied.
      for (int i=0; i<num_paths ; i++)
      {
           // Draw the Unmodified before any transforms are applied.
           moveTo1 = make_moveto(all_pps[i][0]);
           line_path =  Points2paths(all_pps[i], moveTo1, 1, Color.color(0.2, 0.2, 0.2)); // Charcoal
           rootgroup.getChildren().addAll( line_path); 

      } 

      /*
      // Enlarge and shift.
      for (int j=0; j<num_paths ; j++)
      {
            // Enlarge transform (scaling).
       cube_points = Scale_big_small(all_pps[j], 5, 5); // Scaled up by 4.
       cube_points = Shift_translate(cube_points, 100, 50);

       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 2, Color.color(0.6, 0.0, 0.0)); // Red
       rootgroup.getChildren().addAll( line_path); 
      } 
      */

      /*
      // Rotate and shift.
      for (int j=0; j<num_paths ; j++)
      {
            // Enlarge transform (scaling).
       cube_points = Scale_big_small(all_pps[j], 5, 5); // Scaled up by 4.
       cube_points = Rotate_aboutXY(cube_points,  50, 50, 20.); // rotate by 20 degrees.
       cube_points = Shift_translate(cube_points, 300, 50);

       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 1, Color.color(0.6, 0.0, 0.0)); // Red
       rootgroup.getChildren().addAll( line_path); 
      } 
      */

      // Shear and shift.
      for (int j=0; j<num_paths ; j++)
      {
            // Enlarge transform (scaling). FAIL.
       cube_points = Scale_big_small(all_pps[j], 5, 5); // Scaled up by 4.
       cube_points = Shear_XY(cube_points, -100., 0.) ;
       cube_points = Shift_translate(cube_points, 300, 50);

       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 1, Color.color(0.6, 0.0, 0.0)); // Red
       rootgroup.getChildren().addAll( line_path); 
      } 
     
       /*  
       // Enlarge transform (scaling).
       cube_points = Scale_big_small(test_pattern1, 2, 2); // Scaled up by 4.
       //cube_points = Shift_translate(cube_points, 100, 100);
       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 5, Color.color(0.6, 0.0, 0.0)); // Red
       rootgroup.getChildren().addAll( line_path); 
       
       // Rotate transform.
       double[] maxminXY = get_centroid(cube_points) ;
       cube_points = Rotate_aboutXY(cube_points,  50, 50, 20.); // rotate by 20 degrees.
       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 6, Color.color(0.0, 0.8, 0.0)); // Green
       rootgroup.getChildren().addAll( line_path); 
       
       //cube_points = Flip_Horizontal(cube_points); // ok
       cube_points = Flip_Vertical(cube_points);     // ok 
       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 1, Color.color(0.8, 0.0, 0.8)); // Magenta
       rootgroup.getChildren().addAll( line_path); 

      
       // Sheared negative horizontal by a factor of 100 on X. 
       cube_points = Shear_XY(test_pattern1, -100., 0.) ; // sheared by a factor of 100. 
       cube_points = Shift_translate(cube_points, 200, 0);
       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 3, Color.color(0.8, 0.0, 0.0)); // Red
       rootgroup.getChildren().addAll( line_path); 

       // Sheared negative horizontal by a factor of 100 on X. 
       cube_points = Shear_XY(test_pattern1, 100., 0.) ; // sheared by a factor of 100. 
       cube_points = Shift_translate(cube_points, 310, 0);
       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 3, Color.color(0.8, 0.0, 0.8)); // Magenta
       rootgroup.getChildren().addAll( line_path); 

      // Sheared negative vertical by a factor of 100 on Y. 
       cube_points = Shear_XY(test_pattern1, 0., -100.) ; // sheared by a factor of 100. 
       cube_points = Shift_translate(cube_points, 510, 100);
       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 3, Color.color(0.0, 0.0, 0.8)); // Blue
       rootgroup.getChildren().addAll( line_path); 
       
       // Sheared negative vertical by a factor of 100 on Y. 
       cube_points = Shear_XY(test_pattern1, 0., 100.) ; // sheared by a factor of 100. 
       cube_points = Shift_translate(cube_points, 610, 10);
       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 3, Color.color(0.4, 0.0, 0.9)); // Purple
       rootgroup.getChildren().addAll( line_path); 

       // Sheared negative horizontal and vertic by a factor of 100 on X. 
       cube_points = Shear_XY(test_pattern1, -50., -50.) ; // sheared by a factor of 100. 
       cube_points = Shift_translate(cube_points, 810, 60);
       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 3, Color.color(0.6, 0.6, 1.0)); // Blue-Grey
       rootgroup.getChildren().addAll( line_path); 
       
       // Sheared negative horizontal by a factor of 100 on X. 
       cube_points = Shear_XY(test_pattern1, 50., 50.) ; // sheared by a factor of 100. 
       cube_points = Shift_translate(cube_points, 910, 20);
       moveTo1 = make_moveto(cube_points[0]);
       line_path =  Points2paths(cube_points, moveTo1, 3, Color.color(1.0, 0.6, 0.6)); // Magenta
       rootgroup.getChildren().addAll( line_path); 
      
       moveTo1 = make_moveto(cube_pts_transformed[0]);
       line_path =  Points2paths(cube_pts_transformed, moveTo1, 2, Color.color(0.8, 0.0, 0.0)); // Red
       rootgroup.getChildren().addAll( line_path); 
       
       // Shear positive horizontal transform.
       cube_points = Shift_translate(test_pattern1, 110, 0);
       cube_pts_transformed = Shear_XY(cube_points, 200., 0.) ; // sheared by a factor of 100.  
       moveTo1 = make_moveto(cube_pts_transformed[0]);
       line_path =  Points2paths(cube_pts_transformed, moveTo1, 2, Color.color(0.8, 0.0, 0.0)); // Red
       rootgroup.getChildren().addAll( line_path); 

       // Shear positive vertical transform.
       cube_points = Shift_translate(test_pattern1, 220, 0);
       cube_pts_transformed = Shear_XY(cube_points, -200., -100.) ; // sheared by a factor of 100.  
       moveTo1 = make_moveto(cube_pts_transformed[0]);
       line_path =  Points2paths(cube_pts_transformed, moveTo1, 2, Color.color(0.0, 0.0, 0.8)); // Blue
       rootgroup.getChildren().addAll( line_path);       
       
       //cube_pts_transformed = Flip_Horizontal(cube_points); // ok
       cube_pts_transformed =Flip_Vertical(cube_points);     // ok 
       moveTo1 = make_moveto(cube_pts_transformed[0]);
       line_path =  Points2paths(cube_pts_transformed, moveTo1, 1, Color.color(0.8, 0.0, 0.8)); // Magenta
       //rootgroup.getChildren().addAll( line_path); 
       */
       //////////////////////////////////////////////////////////////////////////
        Scene scene = new Scene(rootgroup, 1100, 800);
        primaryStage.setTitle("The Transforms: Shear.");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

}
